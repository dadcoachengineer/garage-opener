substitutions:
  friendly_name: Garage Door

esphome:
  name: garage-opener

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garage-Opener Fallback Hotspot"
    password: !secret failback_password

captive_portal:

#This relay is wired to a pushbutton remote for the garage door opener
switch:
    - platform: gpio
      name: opener
      pin:
        number: GPIO23
        inverted: False
      id: opener
      restore_mode: ALWAYS_OFF
      internal: true

#Hardwired magnetic reed switch mounted to back of door track
binary_sensor:
  - platform: gpio
    name: "Open Sensor"
    pin: 
      number: GPIO18
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - delayed_on_off: 50ms
    id: open_sensor

#Hardwired magnetic reed switch mounted to top of door
  - platform: gpio
    name: "Close Sensor"
    pin: 
      number: GPIO26
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - delayed_on_off: 50ms
    id: close_sensor

#Deterministic sensor for vehicle occupancy
  - platform: template
    name: "Vehicle in Garage"
    device_class: occupancy
    lambda: |-
      if (id(ultrasonic_sensor).state < 1) {
        // Vehicle is in the garage
        return true;
      } else {
        // No vehicle is in the garage
        return false;
      }

#Deterministic sensor for garage door status
  - platform: template
    name: "Garage Door Status"
    device_class: garage_door
    lambda: |-
      if (id(close_sensor).state == false) {
        // Garage door is closed
        return true;
      } else {
        // Garage door is open
        return false;
      }

#Garage door opener configuration - opener --> relay --> pushbutton remote
cover:
  - platform: feedback
    device_class: garage
    name: $friendly_name

    has_built_in_endstop: true

    open_action:
      - switch.turn_on: opener
      - delay: 0.5s
      - switch.turn_off: opener
    open_duration: 11s
    open_endstop: open_sensor

    close_action:
      - switch.turn_on: opener
      - delay: 0.5s
      - switch.turn_off: opener
    close_duration: 11s
    close_endstop: close_sensor

    stop_action:
      - switch.turn_on: opener
      - delay: 0.5s
      - switch.turn_off: opener

sensor:
 # Ultrasonic sensor to determine vehicle occupancy
  - platform: ultrasonic
    trigger_pin: GPIO16
    echo_pin: GPIO17
    name: "Ultrasonic Sensor"
    update_interval: 5s
    timeout: 3m
    id: ultrasonic_sensor

 # Send WiFi signal strength
  - platform: wifi_signal
    name: $friendly_name WiFi Strength
    update_interval: 60s

# Send uptime to HA
  - platform: uptime
    internal: true
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
     
# Send IP Address to HA
text_sensor:
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address
  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start
